version: '3.8'

services:

  postgresql:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: content-manager
    volumes:
      - ./docker/postgres:/var/lib/postgresql/data
    networks:
      - app_global

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    ports:
      - "9090:8080"
    environment:
      KEYCLOAK_LOGLEVEL: TRACE
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,address=8787,server=y,suspend=n"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL:  jdbc:postgresql://postgresql:5432/content-manager
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: password
      KC_IMPORT: /opt/keycloak/data/import/realm-export.json
    volumes:
      - ./docker/keycloak:/opt/keycloak/data/import
    command: start-dev  --import-realm --verbose
    depends_on:
      - postgresql
    networks:
      - app_global

  redis:
    image: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: password
    networks:
      - app_global
    volumes:
      - ./docker/redis:/data

  kafka:
    image: wurstmeister/kafka:latest
    restart: always
    ports:
      - "9092:9092"  # External port for your local application
      - "9093:9093"  # Internal port for communication between Docker containers
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - app_global
    volumes:
      - ./docker/event/kafka:/var/lib/kafka/data

  zookeeper:
    image: wurstmeister/zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app_global
    volumes:
      - ./docker/event/zookeeper:/var/lib/zookeeper/data


networks:
  app_global:
    driver: bridge
